#!/bin/bash

search_for_pi() {
	PI_IP_ADDR_LINE="$(arp -a | grep -m1 "$RASPI_MAC_ADDR")"
}

RASPI_MAC_ADDR="${RASPI_MAC_ADDR}"
# run `arp -a` to find the pi's mac address
if [[ -z "$RASPI_MAC_ADDR" ]]; then
	mac_addr_file="$(dirname "${BASH_SOURCE[0]}")/mac_addr"
	[[ -e "$mac_addr_file" ]] && . "$mac_addr_file"
fi
if [[ -z "$RASPI_MAC_ADDR" ]]; then
	echo "Couldn't find RASPI_MAC_ADDR environment variable" >&2
	exit 1
fi
readonly RASPI_MAC_ADDR

# successively search localhost ports for the pi
search_for_pi
[[ -z "$PI_IP_ADDR_LINE" ]] && {
	# if the pi IP is not in cache, run an outward nmap scan on localhost to try and find it
	nmap -sn -v 10.1.10.0/24 >&2
	search_for_pi
	[[ -z "$PI_IP_ADDR_LINE" ]] && {
		# try the other local address space
		nmap -sn -v 192.168.1.0/24 >&2
		search_for_pi
		[[ -z "$PI_IP_ADDR_LINE" ]] && {
			printf "Couldn't find a device on the network with the mac address: %s\n" "${RASPI_MAC_ADDR}" >&2
			exit 1
		}
	}
}

# search for the first IP address match, else exit with an error
grep -m1 -oP '([\d\.?]+){4}' <<<"$PI_IP_ADDR_LINE" || {
	printf "Regex failed to match an IP address in '%s'\n" "$PI_IP_ADDR_LINE" >&2
	exit 1
}
